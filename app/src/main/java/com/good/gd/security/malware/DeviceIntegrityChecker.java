package com.good.gd.security.malware;

import com.good.gd.ndkproxy.GDLangInterface;
import com.good.gd.ndkproxy.GDLog;
import com.good.gd.security.malware.RuleCheckResults;
import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStreamReader;

/* loaded from: classes.dex */
public class DeviceIntegrityChecker {
    private static final int ECheckInitialized = 0;
    private static final int ECheckNegative = 2;
    private static final int ECheckPositive = 1;
    private static DeviceIntegrityChecker _instance;
    private int mState = 0;
    private int mStateStat = 0;

    private DeviceIntegrityChecker() {
    }

    private void closeQuietly(String str, Closeable... closeableArr) {
        if (closeableArr == null) {
            return;
        }
        try {
            for (Closeable closeable : closeableArr) {
                if (closeable != null) {
                    closeable.close();
                }
            }
        } catch (Exception e) {
            GDLog.DBGPRINTF(13, "CustomResourceLoader Error C" + str + e.toString() + "\n");
        }
    }

    public static DeviceIntegrityChecker getInstance() {
        if (_instance == null) {
            _instance = new DeviceIntegrityChecker();
        }
        return _instance;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(9:1|(10:2|3|4|5|7|8|9|10|11|12)|(7:61|(1:65)|68|18|19|20|(1:22)(1:24))(1:16)|17|18|19|20|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:26:0x00ac, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:27:0x00bb, code lost:
        r10 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:28:0x00c8, code lost:
        r9 = r13;
     */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x00aa, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x00b2, code lost:
        r12 = r9;
        r9 = r13;
        r13 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x0071, code lost:
        if (r9.contains(r0) != false) goto L17;
     */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0198 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:24:0x019a A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:33:0x016b  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x018d  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x01b2  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x01b8  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x010b  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x012d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    private int performSUBinaryExecuteCheck() {
        /*
            Method dump skipped, instructions count: 476
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.good.gd.security.malware.DeviceIntegrityChecker.performSUBinaryExecuteCheck():int");
    }

    public void applicationEnteringBackground() {
        this.mState = 0;
        this.mStateStat = 0;
    }

    public void applicationEnteringForeground() {
        this.mState = 0;
        this.mStateStat = 0;
    }

    public String performDeviceIntegrityChecks(RuleCheckResults ruleCheckResults) {
        if (this.mState == 0) {
            this.mState = performSUBinaryExecuteCheck();
        }
        if (this.mState == 2) {
            return ruleCheckResults.getResult(RuleCheckResults.RESULT_TYPE.FAILURE);
        }
        return ruleCheckResults.getResult(RuleCheckResults.RESULT_TYPE.SUCCESS);
    }

    public int performDeviceStatCheck(byte[][] bArr) {
        BufferedReader bufferedReader;
        String lookup = GDLangInterface.lookup("zZIYKmX/4t5LdEJfRcMgkA==");
        String lookup2 = GDLangInterface.lookup("Of2EPSO7oPAGG/bxbNntD74X2TOj10siAkKkHPk4VAgPio6gUBCSn4h1oC0jPAcO2DsN/4FUXF6YMsI9O0OxCw==");
        if (bArr != null) {
            Runtime runtime = Runtime.getRuntime();
            BufferedReader bufferedReader2 = null;
            for (int i = 0; i < bArr.length; i++) {
                try {
                    bufferedReader = new BufferedReader(new InputStreamReader(runtime.exec(lookup + new String(bArr[i])).getInputStream()));
                    try {
                        StringBuilder sb = new StringBuilder();
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            sb.append(readLine + " ");
                        }
                        if (sb.toString().matches(lookup2)) {
                            try {
                                bufferedReader.close();
                            } catch (IOException e) {
                            }
                            return 2;
                        }
                    } catch (IOException e2) {
                        bufferedReader2 = bufferedReader;
                        if (bufferedReader2 != null) {
                            bufferedReader = bufferedReader2;
                            bufferedReader.close();
                            bufferedReader2 = bufferedReader;
                        }
                    } catch (Throwable th) {
                        th = th;
                        bufferedReader2 = bufferedReader;
                        if (bufferedReader2 != null) {
                            try {
                                bufferedReader2.close();
                            } catch (IOException e3) {
                            }
                        }
                        throw th;
                    }
                } catch (IOException e4) {
                } catch (Throwable th2) {
                    th = th2;
                }
                try {
                    bufferedReader.close();
                } catch (IOException e5) {
                }
                bufferedReader2 = bufferedReader;
            }
            return 1;
        }
        return 1;
    }

    public String performStatCheck(byte[][] bArr, RuleCheckResults ruleCheckResults) {
        if (this.mStateStat == 0) {
            this.mStateStat = performDeviceStatCheck(bArr);
        }
        if (this.mStateStat == 2) {
            return ruleCheckResults.getResult(RuleCheckResults.RESULT_TYPE.FAILURE);
        }
        return ruleCheckResults.getResult(RuleCheckResults.RESULT_TYPE.SUCCESS);
    }
}
